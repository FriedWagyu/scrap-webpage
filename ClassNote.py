# -*- coding: utf-8 -*-
"""Class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xVzKedukf5fYtSrWV6WgEqHKy4XmT7i5

# Hello World
"""

#####################################
# Class 1 Print Variables Operators
#####################################

print("Hello world")
print("This", "is", "a", "sentence")

print("Here", end=" ")
print("it is")
# end is to define how the final string, normally (without end) will be a new line
# end will replace new line with things in ""

print("""
a
long
line
""")
# triple coding will print long strings span on multiple lines

print("Those" + "are" + "this")
# + will attach strings, add space if you need

print(5)
# numbers can be printed directly

# comment is used as a comment or to prevent some code from executing
# print(5)
'''
this
is
a
block
comment
'''
# multi line comment may disable codes you do not want to disable
# by control + / will comment multiple lines

# variables
# RAM is made from addresses
# we give name to addresses by variables
# variables is to label info
num = 5  # put number 5 into location num, = is the assignment operator

# variable name must start with letter or _, no digits, no spaces
# variables are case sensitive

x = 5
print(x)

# variables can be initialized to None
var = None

# 3 types
# Integer, number w/o decimal
# Float, w/ decimal
# String, text, text = "text"
# number 1 and string 1 is different
pie = 3.14
string = "I am a string"

print(num)
print(pie)
print(string)
# print variables w/o quotes

print("the number is", num)

# choosing bad name for variables will decrease grades
# the name cannot be a keyword of Python, e.g. print
# descriptive name
# always start with lower case
# don't use one-letter name, unless a counter or temporary variables
# abbreviation that people can understand, e.g. num for number
# no long names
# camel notation: numOfStudents
# underscore: num_of_students
# prefix for understand data type
nNumOfStudents = 7
fRatio = 3.14
strFirstName = "joel"

# get input from user
nNum = input("Enter a number ")  # space is required in last quote
print("The number you entered is", nNum)

nNum1 = input("Enter the first number ")
nNum2 = input("Enter the second number ")
nTotal = nNum1 + nNum2
print("The total is", nTotal)
# you will get 1 + 1 = 11 because input is always returning string
# we have to convert str to n

strNum1 = input("Enter the first number ")
nNum1 = int(strNum1)
strNum2 = input("Enter the second number ")
nNum2 = int(strNum2)
nTotal = nNum1 + nNum2
print("The total is", nTotal)

nNum1 = int(input("Enter the first number "))
nNum2 = int(input("Enter the second number "))
nTotal = nNum1 + nNum2
print("The total is", nTotal)
# convert into number: int, float: float, string: str
# float(X) str(x) int(x)

# % remainder of x/y e.g. 10 % 3 = 1
# limit the set of possible answers, x % y remainder is always < y

# // floor division 10 // 4 = 2 instead of 2.5
# index should always be int so we use this
# computer will get 7 instead of 7.0

# ** 2 ** 3 = 8 次方
# space is needed, coding style
a = 5 * 8

# self modification
a = a + 1
a += 1

# priority ** higher than * / // % higher than + -
a = 5 + 2 * 3  # 11
a = 5 + (2 * 3)  # 11 even it is the same, it make the code more clear
a = (5 + 2) * 3  # 21

#####################
# Class 02 Strings
#####################

# len is the length
strSentence = "This is a sentence"
nLen = len(strSentence)
print(nLen)

# dot notation
# in most languages person.hair = person's hair
strSentence = "Hello"
strUpper = strSentence.upper()  # upper is method
print(strSentence)  # print is a function
print(strUpper)
strLower = strSentence.lower()
print(strLower)

# find() will find the location of the substring
strSentence = "This is a sentence"
print(strSentence.find("is"))  # It shows 2 because is in this is the 0 1 2's 2
print(strSentence.replace("is", "is not", 1))  # replace for only 1 time

# string indexing
strValue = "hello"
print(strValue[0])
print(strValue[1])
print(strValue[4])

# 0  1  2  3  4
# h  e  l  l  o
# -5 -4 -3 -2 -1

# string is immutable (cannot change value, when modifying a new string will be created, but not overwrite in the RAM)
strValue = "hello"
strValue[0] = "r"  # will generate an error, because string cannot be changed

# strSubstring = strOriginalString[start:finish]
strOriginal = "Hello"
print(strOriginal[0:2])

# library
# random.randrange(start, stop) stop number is excluded
import random

strValue = "hello"
nPos = random.randrange(0, 5)  # 5 is excluded
print("Random number:", nPos)
print("Character at", nPos, ":", strValue[nPos])
# another way
import random

strValue = "hello"
nLen = len(strValue)
nPos = random.randrange(0, nLen)  # always get right value because nLen = 5
print("Random number:", nPos)
print("Character at", nPos, ":", strValue[nPos])

##########################
# Class 03 Boolean Logic
##########################

# Algorithms: finite steps in order to solve a problem
# Boolean Value : True ot False
# Expression : 7 is smaller than 12 Result : True
# Boolean variables Start with b
bIsPositive = False
# logical operators and : True and True is True, others : False
# or : if one condition is true : True
# not : Returns the Opposite not True : False
# > Grater than
# < Less than
# == Equal, two == because = is used to assign value
# != Not equal
# >=
# <=
# They will return True or False
5 == 5  # Will Return True

#################
# Flow Control
#################

if testExpression:
    statement(s)

x = 5
if x > 0:
    print("x is positive")
    print("x is definitely positive")
else:
    print("x is negative")
print("this is not a part of if")  # indented lines will be executed as a if/else statement

nGrade1022 = 78
nGrade1051 = 95
if (nGrade1022 >= 70) and (nGrade1051 >= 70):
    print("You can register in Java")
else:
    print("Try again next semester")

strPassword = input("Input password ")
if strPassword == "python":
    print("Access granted")
else:
    print("Access denied")

nNum1 = int(input("Input Number 1: "))
nNum2 = int(input("Input Number 2: "))
bAreEqual = (nNum1 == nNum2)
if bAreEqual:
    print("The numbers are equal")
else:
    print("The numbers are different")

# elif if there are more if
x = 0
if x > 0:
    print("x is positive")
elif x == 0:
    print("x is zero")
else:
    print("x is negative")

x = 5
if x >= 0:
    if x == 0:
        print("x is zero")
    else:
        print("x is positive")
else:
    print("x is negative")

############
# Exercise
############

fTemp = float(input("Input a temperature: "))

if fTemp >= 30:
    print("Hot")
elif fTemp >= 25:
    print("Warm")
elif fTemp >= 15:
    print("Cool")
else:
    print("Cold")

strSentence = input("Input a sentence: ")
strSearch = input("You want to search: ")
nPos = strSentence.find(strSearch)

if nPos == -1:
    print("Not found")
else:
    print("Found")

strNameLower = input("Input your name in lower case: ")
strNameUpper = input("Input your name in upper case: ")
if strNameLower == strNameUpper.lower():
    print("Same")
else:
    print("Different")

nFirstNumber = int(input("Enter the first number: "))
nSecondNumber = int(input("Enter the second number: "))
if nFirstNumber > nSecondNumber:
    print(nFirstNumber)
else:
    print(nSecondNumber)

# Swap
num1 = 15
num2 = 20
# Swap
temp = num1
num1 = num2
num2 = temp

max = 15
min = 20
if min > max:
    temp = max
    max = min
    min = temp
print("max =", max)
print("min =", min)

#######################
# Class 05 While Loop
#######################

# While loop is used when we cannot predict how many times we loop
# Will run as long as the condition is true
# Sentry Variable control the loop (start/stop)
# At the beginning should be true
# Update until the value become False

while conditionIsTrue:
    statement(s)

# Example, STYLE: should be blank line surround while
i = 0

while i < 10:
    print(i)
    i = i + 1

print("Counting complete")
# Example end

# Example
strText = "Hello"
i = 0
nLen = len(strText)

while i < nLen:
    print(strText[i])
    i = i + 1

# End

# Example
strSentence = "I am writing a while loop in Python"
i = 0

while strSentence[i] != "e":
    i += 1

print("There are", i, "characters before 'e'")
# End

# Compound Condition
strSentence = "I am writing a while loop in Python"
i = 0
nLen = len(strSentence)

while (strSentence[i] != "j") and (i < nLen - 1):
    i += 1

if i == nLen - 1:
    print("'j' is not found in the string")
else:
    print("There are", i, "characters before 'j'")
# End, but if j is the last one we cannot find it

# Control Loop with continue and break
# continue means go back to the beginning
i = 0

while i < 10:
    i += 1

    if i == 5:
        continue

    print(i)

i = 0

while i < 10:
    i += 1

    if i == 5:
        break

    print(i)

# Infinite Loop
i = 0

while True:
    i += 1

    if i == 5:
        break

    print(i)

#################
# Pseudocode
# human language code to be translated to Python
# like draft, comments

##############
# Exercises
##############

nNum = 2
strOutPut = "0"

while nNum <= 10:
    strOutPut = strOutPut + str(nNum)
    nNum += 2

print(strOutPut)

while True:
    strSentence = input("Input a sentence: ")
    while True:
        strSubSentence = input("Input what to search: ")
        nFindReturn = strSentence.find(strSubSentence)
        if nFindReturn == -1:
            print("Not Found")
        else:
            print("Found")
        strContinueToSearch = input("Would you like to search for something else? Y to continue: ")
        if strContinueToSearch == "Y":
            continue
        else:
            break
    strDoEverythingAgain = input("Would you like to try again? Y to continue: ")
    if strDoEverythingAgain == "Y":
        continue
    else:
        break

import random

nNum = random.randrange(0, 10)
nInput = int(input("Guess a digit: "))
nTime = 1

while nInput != nNum:
    nTime += 1
    nInput = int(input("Guess another digit: "))

print("Correct! You tried", nTime, "times!")

# scramble word

import random

strWord = input("Input a word: ")
strNewWord = None

while len(strWord) != 0:
    nRand = random.randrange(0, len(strWord))
    strChar = strWord[nRand]

    if strNewWord is None:
        strNewWord = strChar
    else:
        strNewWord = strNewWord + strChar

    strSlice1 = strWord[0:nRand]
    strSlice2 = strWord[(nRand + 1):len(strWord)]
    strWord = strSlice1 + strSlice2

print(strNewWord)

##################
# For Loop
##################

# we know how many times to loop

for val in sequence:
    statement(s)

for i in range(0, 5):
    print(i)

for i in range(10, 21):
    print(i, end=" ")

# Sum 1 to 10

nSum = 0

for i in range(1, 11):
    nSum += i

print("The sum is", nSum)

# multiple 1 to 10

nSum = 1

for i in range(1, 11):
    nSum *= i

print(nSum)

# step will change by step instead of + 1

range(start, stop, step)

for i in range(0, 20, 2):  # we got 0 to 18 since 20 is excluded
    print(i)

for i in range(10, -1, -1):  # count down must have negative step, 0 is excluded so if want 0, -1 is necessary
    print(i)

#########################
# Arrays: to hold many values at the same time: fixed size
#########################

# python do not have arrays
# in python lists can stimulate arrays
# array can not grow or shrink however list can be added or taken

arrNumbers = [10, 20, 30, 40, 50]
print(arrNumbers[0])
print(arrNumbers[3])
print(len(arrNumbers))  # length is 5
nLen = len(arrNumbers)

for i in range(0, nLen):  # to loop an array
    print(arrNumbers[i])

arrNumbers[0] = 5  # to change an array's values

for i in range(0, nLen):  # to loop an array
    print(arrNumbers[i])

# input and out

arrNumbers = [0, 0, 0, 0, 0]
nLen = len(arrNumbers)

for i in range(0, nLen):
    strInputText = "Input element " + str(i + 1) + ": "
    arrNumbers[i] = input(strInputText)

for i in range(0, nLen):
    print(arrNumbers[i], end=" ")

# check if a character exist

strText = "For loop in python"
nLen = len(strText)

for i in range(0, nLen):
    if strText[i] == "o":
        print("exist")

bContains = False

for i in range(0, nLen):
    if strText[i] == "o":
        bContains = True
        break

if bContains is True:
    print("is exist")

# count how many one character occurs

strText = "For loop in python"
nLen = len(strText)
nCount = 0

for i in range(0, nLen):
    if strText[i] == "o":
        nCount += 1

print(nCount)

###################
# in Operator
###################

arrNumbers = [10, 20, 30, 40, 50]

for nNum in arrNumbers:
    print(nNum)

# count how many one character occurs

strText = "For loop in python"
nCount = 0

for c in strText:  # only ascending order but easier to use
    if c == "o":
        nCount += 1

print(nCount)

# Exercise

arrNumbers = [5, 7, 2, 83, 12, 25]
nUsrInput = int(input("Search a number: "))
nLenNumbers = len(arrNumbers)
bExist = False

for i in range(0, nLenNumbers):
    if arrNumbers[i] == nUsrInput:
        print("The number is at:", i)
        bExist = True

if bExist is False:
    print("No such number.")

arrNumbers = [5, 7, 2, 83, 12, 25]
nLargest = 0
nSmallest = arrNumbers[0]

for i in arrNumbers:
    if i > nLargest:
        nLargest = i
    if i < nSmallest:
        nSmallest = i

print(nLargest, nSmallest)

arrNumbers = [5, 7, 2, 83, 12, 25]
nSum = 0
nLen = len(arrNumbers)

for i in arrNumbers:
    nSum += i

fAvg = nSum / nLen
print(fAvg)

strSentence = "I love python."
strNewSent = None
nLen = len(strSentence)

for i in range((nLen - 1), -1, -1):

    if strNewSent is None:
        strNewSent = strSentence[i]
    else:
        strNewSent += strSentence[i]

print(strNewSent)

for i in range(1, 26):
    if (i % 2) == 1:
        print(i)

# search for even/odd number

arrNum = [1, 4, 5, 8, 5]

for value in arrNum:
    if value % 2 == 0:
        print(value)


#####################
# Functions
#####################

# function performs a specific task
# like print() and len()
# a function must have a name
# naming rule same as variables
# using function will make code easier
# function can be used again and again
# to call a function, we must define it
# function(arguments)
# len("Hello") Argument: string Action: count Return: number
# print("Hello") Argument: string Action: display Return: nothing

def functionName(parameters):
    statement(s)


def printGreeting():
    print("Hello")


printGreeting()


def printGreeting(a_strGreeting):
    print(a_strGreeting)


printGreeting("Hello")


def printGreeting(a_strName, a_strGreeting):
    print("Hello", a_strName + ".", a_strGreeting)


printGreeting("John", "How are you?")


def f(a_fx):
    fy = (a_fx ** 2) + 1
    return fy


print(f(2))


def absoluteValue(a_nValue):
    nAbsValue = None

    if a_nValue >= 0:
        nAbsValue = a_nValue
    else:
        nAbsValue = -a_nValue

    return nAbsValue


def absoluteValue(a_nValue):
    if a_nValue >= 0:
        return a_nValue
    return -a_nValue  # return will stop function


# default argument can be used when we do not provide any value

def greet(a_strName, a_strGreeting = "How is it going?"):         # default value should only be the right side
    print("Hello", a_strName + ".", a_strGreeting)


greet("John")


def greet(a_strName = "there", a_strGreeting):   # this is wrong!!
    print("Hello", a_strName + ".", a_strGreeting)

# Variable scope:
# if a variable is defined inside the function it will stay only in the function
# if a variable is defined before the function it can be used in the function

# Recursion: a function calls it self

def factorial(a_nNumber):
    if a_nNumber == 1:
        return 1
    else:
        return a_nNumber * factorial(a_nNumber - 1)

print(factorial(3))

def fib(a_nNumber):
    if a_nNumber == 0:
        return 0
    elif a_nNumber == 1:
        return 1
    else:
        return fib(a_nNumber - 1) + fib(a_nNumber - 2)

print(fib(4))

##############
# Nested Loop
##############

# outer loop
# inner loop

for i in range(1, 4):
    print("i =", i)

    for j in range(1, 5):
        print(j, end = " ")

    print() # empty line

for i in range(1, 6):
    print("Row", i, end = "\t")  # \t is tab

    for j in range (10, 40, 10):
        print(j, end = " ")

    print()  # a new line

for i in range(1, 11):
        print("Row", i, end="\t")

        for j in range(1, 20):
            print(j + (i - 1) * 19, end="\t")

        print()

#####
# Exercise
#####

def max2(a_nVal1, a_nVal2):

    if a_nVal1 > a_nVal2:
        return a_nVal1

    return a_nVal2

def max3(a_nVal1, a_nVal2, a_nVal3):

    m = max2(a_nVal1, a_nVal2)
    result = max2(m, a_nVal3)

    return result

def max4(a_nVal1, a_nVal2, a_nVal3, a_nVal4):

    return max2(a_nVal1, max2(a_nVal2, max2(a_nVal3, a_nVal4)))  # not good for debug

print(max3(1, 3, 5))
print(max4(10, 4, 5, 16))

def removeChar(a_strWord, a_nPos):

    nLen = len(a_strWord)
    strSlice1 = a_strWord[0:a_nPos]
    strSlice2 = a_strWord[(a_nPos + 1):nLen]
    return strSlice1 + strSlice2

print(removeChar("abcde", 2))


import random

nRandNum = random.randrange(1, 101)

def printInstructions():
    nUserGuess = int(input("Guess a number between 1 and 100: "))

    return nUserGuess

def mainLoop():
    nUserGuess = printInstructions()
    nTryTime = 1

    while nUserGuess != nRandNum:
        nTryTime += 1

        if nUserGuess > nRandNum:
            print("Too Big!")
        else:
            print("Too Small!")

        nUserGuess = int(input("Guess again: "))

    return nTryTime

def printGameOver():
    print("Correct! You tried for", mainLoop(), "times.")

printGameOver()

"""# Lists"""

##################
# Lists
##################

# List are created with []
# 0 to len - 1

listNumbers = [2, 2, 3]

if 1 in listNumbers:  # in operator
    print(1)

print(listNumbers[1:3])  # slice

listString = ["i", "o"]
listCombined = listNumbers + listString  # Combine two lists
print(listCombined)

print(max(listNumbers))  # max and min

list()  # transform string to list

strText = "this is a string"
print(list(strText))  # each character will be a value of a list

for strNum in listNumbers:  # for loop can be used
    print(strNum)

append()  # add an element to the end
insert()  # insert a item inside
remove()  # remove an item, remove by value
pop()  # remove by index, and return the value removed
clear() # remove all
sort()  # sort items

listFruits = ["orange", "apple", "banana"]
listFruits.append("peach")  # add
print(listFruits)
listFruits.insert(1, "palm")  # insert at 1
print(listFruits)
listFruits.remove("palm")  # remove palm, will only remove the first one
print(listFruits)
print(listFruits.pop(3))  # remove 3 and return the value
print(listFruits)
listFruits.sort()  # sort * sort(reverse = True) will reverse
print(listFruits)
listFruits.clear()  # remove all
print(listFruits)

# nested loops
# list of int, can be traversed in a for loop
# list of str
# list of list, can be accessed as, list[0][2]

listNum = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]
print(listNum[0])  # print row 1
print(listNum[0][1]) # print 2 in row 1
for i in range(0, 3):  # rows
    print("Row", i, end = "\t")  # row number followed by "\t"
    for j in range(0, 3):  # columns
       print(listNum[i][j], end = " ")  # each list followed by " "
    print()  # new line

listNum = [[0, 0, 0, 0],
           [0, 0, 0, 0],
           [0, 0, 0, 0]]
nRows = len(listNum)
nCols = len(listNum[0])  # assume all Cols have same len
for i in range(0, nRows):
    for j in range(0, nCols):
        strPrompt = "Input " + str(j) + " in " + str(i) + ": "
        listNum[i][j] = int(input(strPrompt))
print(listNum)

listNum = []
for i in range(0, 3):
    listNum.append([])
    for j in range(0, 4):
        listNum[i].append(0)
print(listNum)

# print as argument

def printList(a_listNum):
    nLen = len(a_listNum)

    for i in range(0, nLen):
        print(a_listNum[i])

# double argument
# if the parameter is a variable, function cannot change the original variable

def doubleArgument(a_nVal):
    a_nVal = a_nVal * 2
    print("Inside:", a_nVal)

nVal = 5
doubleArgument(nVal)
print("Outside:", nVal)

# but if a list

def doubleList(a_listNum):
    nLen = len(a_listNum)

    for i in range(0, nLen):
        a_listNum[i] = 2 * a_listNum[i]

listNum = [1, 2, 3, 4]
doubleList(listNum)
print(listNum)

# it modifies the original list

# return can only be one variable
# but with list, it can be multipie values

def countEven(a):
    listEven = []

    for i in range(0, a):
        if i % 2 == 0:
            listEven.append(i)

    return listEven  # return a list

print(countEven(10))

###
# Exercise
##

# 01

nListSize = int(input("Input size: "))
listNumbers = []

for i in range(0, nListSize):
    listNumbers.append(0)

print(listNumbers)

# 02

listName = []

while True:
    strAddName = input("If add Name? Y/N: ")

    if strAddName == "Y":
        listName.append(input("Input Name: "))
    else:
        break

for strName in listName:
    print(strName)

# 03

listNumbers = [0, 1, 2, 3, 4]
nLen = len(listNumbers)

if nLen % 2 == 1:
    listNumbers.pop(nLen // 2)
else:
    listNumbers.pop((nLen // 2) - 1)
    listNumbers.pop(nLen // 2)

print(listNumbers)

# 04

listSai = [1, 3]

def resetList(a_listWord, a_nSize, a_strValue):
    a_listWord.clear()

    for i in range(0, a_nSize):
        a_listWord.append(a_strValue)

resetList(listSai, 7, "a")
print(listSai)

# 05

def resetList(a_nSize, a_strValue):
    listWord = []

    for i in range(0, a_nSize):
        listWord.append(a_strValue)

    return listWord

print(resetList(7, "y"))

"""# Dictionary"""

dictEmpty = {}

dictCountries = {"japan" : "tokyo", "france" : "paris"}

print(dictCountries["france"])

dictCountries["japan"] = "Tokyo"  # update a value

print(dictCountries["japan"])

print(dictCountries)

dictCountries["italy"] = "rome"  # add value

print(dictCountries)

print(len(dictCountries))  # len will return number of pairs

dictCountries.clear()  # clear everything

print(dictCountries)
dictCountries = {"japan" : "tokyo", "france" : "paris"}

dictCountries.pop("japan")  # delete key and value

print(dictCountries)

print(dictCountries.keys())  # colloection of keys, can only display, not used
print(dictCountries.values())  # colloection of values

"""# Formatting"""

strData = "This is {} formatting"  # {} is used as placeholder
print(strData.format("basic"))  # format
print(strData.format("not advanced"))
print("This is {} formatting".format("basic"))  # can also format directly
print("This is {} and {} and {}".format("first", "second", "third"))  # {}will be replaced in order

numOfPages = 10
print("there are {} pages".format(numOfPages))  # can use value

print("Format 1 {:2d}".format(25))
print("Format 1 {:3d}".format(25))
print("Format 1 {:4d}".format(25))
print("Format 1 {:5d}".format(25))  # :2d is digits
print("Format 1 {:05d}".format(25))  # 0 will replace spaces
print("Format 1 {:5d}".format(1))
print("Format 1 {:5d}".format(10))
print("Format 1 {:5d}".format(100))
print("Format 1 {:5d}".format(1000))  # allign the numbers

# for float
pi = 3.141592653589793
print("{:8.2f}".format(pi)) # f: float 四舍五入
print("{:8.4f}".format(pi))  # total 8 digits 4 digits after point
print("{:08.4f}".format(pi))  # leading 0s

# for strings
print("{:11}".format("hello")) # left alligned
print("{:<11}".format("hello")) # left alligned
print("{:>11}".format("hello")) # right alligned
print("{:*>11}".format("hello")) # right alligned padding with *
print("{:+<11}".format("hello")) # right alligned padding with +
print("{:^11}".format("hello")) # center text
print("{:-^11}".format("hello")) # center text padding with -
print("{:-^12}".format("hello")) # center text padding with - if is not even number, the large padding will on right side

# Exercise

arr = [[1, 2, 3, 4],
       [5, 6, 7, 8],
       [9, 10, 11, 12],
       [13, 14, 15, 16]]

nRow = len(arr)
nCol = len(arr[0])

for i in range(0, nRow):
    for j in range(0, nCol):
        print("{:2d}".format(arr[i][j]), end = " ")
    print()

"""# File I/O"""

file1 = open("test.txt") # Current Directory
file2 = open("C:/Documents/test2.txt") # Full Path
# Modes
"""
r = reading (Default)
w = writing (If the File does not exist, create / if exist overwright)
x = create (only create, if exist: error)
a = appending (add info to file / no overwrite)
t = text mode (Default)
b = binary mode
+ = updating (read and write)
r+ = read and write to a file, if not exist: error
w+ = write to: overwritten or create
"""
file1 = open("test.txt") # r or rt
file2 = open("text.txt", 'w') # write
file3 = open("img.bmp", 'w+b') # read and write binary
file1.close() # close the file at last

# Writing: putting info to a file
# must be opened with 'w' 'x' 'a' '+'
file1 = open("text.txt", 'w') # overwrite and create

file1.write("this is a line\n")
file1.write("this is another line\n")

file1.close()

file1 = open("text.txt", 'a') # append

file1.write("New Content\n")

file1.close()

file1 = open("text.txt", "r") # read

print(file1.read())

file1.close()

# read a given size

file1 = open("text.txt", "r")

print("Reading 4 bytes") # read first 4 alphabet
print(file1.read(4))

print("\nReading 3 bytes") # read 3 bytes after first 4
print(file1.read(3))

# tell and seek

print(file1.tell()) # tell current pos

file1.seek(2) # move to pos 2

file1.close()

# read line by line

file1 = open("text.txt", "r")

strData = file1.readline()
print(strData, end = "") # already has /n

strData - file1.readline()
print(strData, end = "") 

file1.close()

# print line by line

file1 = open("text.txt", "r")

for strLine in file1:
    print(strLine, end = "")

file1.close()

# read as lists

file1 = open("text.txt", "r")

listRead = file1.readlines()
print(listRead)

file1.close()

# Exercise 01 count lines without readline

file1 = open("text.txt", 'r')

count = 0

for strLine in file1:
    count += 1

print(count)

# Exercise 02 

listContact = []
listContact.append(input("First Name: "))
listContact.append(input("Last Name: "))
listContact.append(input("Phone: "))

file1 = open("Contact.txt", "w")

for strData in listContact:
    file1.write(strData + "\t")

file1.close()

# Exercise 03 

file1 = open("Contact.txt", "r")

strData = file1.read()
print(strData)

file1.close()

"""# Directory"""

# Absolute path F:\TUJ\x.txt
# Relative path from the current Directory

# Current Direcotry

import os

strCurrentDir = os.getcwd() # Current Direcotry
print(strCurrentDir)

# Change Directory

import os

os.chdir("C:/") # Change Directory
strCurrentDir = os.getcwd()
print(strCurrentDir)

import os

listDir = os.listdir() # List Dir
print(listDir)

listDir = os.listdir("C:/") # List Another Dir 
print(listDir)

import os

listDir = os.listdir() # List Dir
print(listDir)

os.mkdir("PythonTest") # Make Dir

listDir = os.listdir() # List Dir
print(listDir)

import os

listDir = os.listdir() # List Dir
print(listDir)

os.rmdir("PythonTest") # remove an empty dir

listDir = os.listdir() # List Dir
print(listDir)

import os

listDir = os.listdir() # List Dir
print(listDir)

os.remove("abc.txt") # remove an file

listDir = os.listdir() # List Dir
print(listDir)

import shutil

shutil.cotyfile("test.txt", "testcopy.txt") # copy a file

import shutil
import os

os.mkdir("PythonDir") # create a dir

shutil.move("textcopy.txt", "PythonDir/test.txt") # move and change the file name to test.txt

import os

strPath = "PythonDir"

if os.path.isdir(strPath): # check if strPath is dir
    print(strPath, "is a dir")

import os

strFile = "PythonDir.txt"

if os.path.isfile(strFile): # check if strFile is file
    print(strFile, "is a file")

import shutil

shutil.rmtree("PythonDir") # delete EVERYTHING in the dir

import os

listDir = os.listdir()

for strEntry in listDir:
    if ".txt" in strEntry: # check if contains txt
        print(strEntry)

import os

strDir = "PythonDir"
os.mkdir(strDir) # create dir

strNewDir = strDir + "/" + "Text Files"
os.mkdir(strNewDir) # create dir inside PythonDir

os.chdir(strDir)
os.mkdir("Python Files") # create dir inside PythonDir

import os

strDir = "PythonDir"

os.chdir(strDir)

for i in range(1, 4):
    file1 = open("File " + str(i) + ".txt", "w")
    file1.close() # create 3 txt files under PythonDir

for i in range(1, 4):
    file1 = open("File " + str(i) + ".py", "w")
    file1.close() # create 3 py files under PythonDir

import os
import shutil

strDir = "PythonDir"

os.chdir(strDir)
listDir = os.listdir()

for strEntry in listDir:
    if os.path.isfile(strEntry):
        if ".txt" in strEntry:
            shutil.move(strEntry, "Text Files/" + strEntry)
        elif ".py" in strEntry:
            shutil.move(strEntry, "Python Files/" + strEntry)

import shutil

strDir = "PythonDir" 

shutil.rmtree(strDir) # delete all

"""# Excel

Needed Packeges:  
openpysl  
requests  
beautifulsoup4
"""

# access excel

import openpyxl

wb = openpyxl.load_workbook("example.xlsx")  # wb is workbook

listSheets = wb.sheetnames  # returns a list of sheets
print(listSheets)

sheet = wb["Sheet1"]  # load sheet
print(sheet.title)  # print the title of sheet

strValue = sheet["A1"].value  # access  A1's value, w/o value will return cell A1
print(strValue)

cell = sheet["A1"] #access cell
strValue = cell.value  # same as last one
print(strValue)

print(cell.row)  # print row: 1
print(cell.column)  # print column: 2 which is B in ABCDE
print(cell.coordinate)  # print coordinate: B1

cell = sheet.cell(row = 1, column = 2) # another way to access cell

# row and colomn always start with 1

for i in range(1, 8):  # use a loop to ptint a column
    print(i, sheet.cell(row = i, column = 2).value)

nMaxRow = sheet.max_row  # know how many rows and columns
nMaxCol = sheet.max_column

for i in range(1, nMaxRow + 1):  # print all
    for j in range(1, nMaxCol + 1):
        print(sheet.cell(row = i, column = j).value, end = "\t\t\t")
    print()

from openpyxl.utils import get_column_letter # number to letter
from openpyxl.utils import column_index_from_string # letter to number
print(get_column_letter(1))
print(column_index_from_string("A"))

for rowOfCellObjects in sheet["A1:C3"]:  # access A1 to C3 row by row
    for cellObject in rowOfCellObjects:  # access column to column
        print(cellObject.value, end = "\t\t\t")
    print()

for rowOfCellObjects in sheet["A1:C3"]:  # access A1 to C3 row by row
    for cellObject in rowOfCellObjects:  # access column to column
        print(cellObject.coordinate, end = "\t\t\t")  # output coordinate
    print()

import openpyxl

wb = openpyxl.Workbook()  # create a file not load workbook

sheet = wb.active  # access the only sheet available

sheet.title = "Attendance"

wb.save("ExcelPython.xlsx")  # save the work book, always need a file name

print("Done")

import openpyxl

wb = openpyxl.load_workbook("ExcelPython.xlsx")

sheet = wb["Attendance"]

sheet.title = "New Attendance"  # change sheet name

wb.save("ExcelPython - Copy.xlsx")  # save as amother file

import openpyxl

wb = openpyxl.load_workbook("ExcelPython - Copy.xlsx")

wb.create_sheet("Fruits")
wb.create_sheet("Vegetables")  # create sheet

listSheets = wb.sheetnames
print(listSheets)

wb.remove(wb["New Attendance"]) # remove sheet
listSheets = wb.sheetnames
print(listSheets)

wb.save("ExcelPython - Copy.xlsx")

import openpyxl

wb = openpyxl.load_workbook("ExcelPython - Copy.xlsx")

sheet = wb["Fruits"]

sheet["A1"] = "Apple"
sheet["A2"] = "Banana"
sheet["A3"] = "Cherries"

wb.save("ExcelPython - Copy.xlsx")

# Exercise

import openpyxl

wb = openpyxl.load_workbook("produceSales.xlsx")

sheet = wb["Sheet"]

nMaxRow = sheet.max_row

for i in range(2, nMaxRow + 1):  # first row is header, so from 2
    strFruitName = sheet.cell(row = i, column = 1).value
    if strFruitName == "Garlic":
        sheet.cell(row = i, column = 2).value = 3.07
    elif strFruitName == "Celery":
        sheet.cell(row = i, column = 2).value = 1.19
    elif strFruitName == "Lemon":
        sheet.cell(row = i, column = 2).value = 1.27

wb.save("produceSalesNew.xlsx")

"""# Scraping"""

<html>
<head>
    <title>Scraping in Python</title>
</head>
<body>
    <p>Hello</p>
    <h1>This is heading 1</h1>
    <h2>This is heading 2</h2>
    <br>
    <a href = "https://bowensai.com/">This is Bowen Sai</a>
    <div id = "bigLink1">
        <h2>
            <a href = "https://bowensai.com/">This is Bowen Sai</a>
        </h2>
        <p>The link go to Bowen Sai</p>
    </div>
    <div id = "bigLink2">
        <h2>
            <a href = "https://youtube.com/">This is YouTube</a>
        </h2>
    </div>
    <table border= 1>
        <tr>
            <td>cell</td>
            <td>cell</td>
            <td>cell</td>
        </tr>
        <tr>
            <td>cell</td>
            <td>cell</td>
            <td>cell</td>
        </tr>
    </table>
    <ol>
        <li>Item1</li>
        <li>Item2</li>
        <li>Item3</li>
    </ol>
</body>
</html>

from bs4 import BeautifulSoup

htmlFile = open("htlmSample.html")
htmlData = htmlFile.read()
htmlFile.close()

soup = BeautifulSoup(htmlData, "html.parser")

titleText = soup.title.text
divTag1 = soup.div
divTag2 = soup.find("div", id = "bigLink2")

print(divTag2.h2.a.text)
print(divTag2.h2.a["href"])
print(divTag1.p.text)

listDivTag = soup.find_all("div")
print(listDivTag)  # a list of divs

for divTag in listDivTag:
    linkText = divTag.h2.text
    print(linkText)

tableTag = soup.find("table")

tableData = []
tableRows = tableTag.find_all("tr")

for row in tableRows:
    tableCols = row.find_all("td")
    listData = []

    for col in tableCols:
        listData.append((col.text.strip()))  # extract text and remove spaces

    tableData.append(listData)

print(tableData[0][2])

import requests
from bs4 import BeautifulSoup

htmlFile = requests.get("https://first-web-scraper.readthedocs.io/en/latest/").text

soup = BeautifulSoup(htmlFile, "html.parser")

section = soup.find("h1")
title = section.text
print(title)

import requests
from bs4 import BeautifulSoup

htmlFile = requests.get("https://first-web-scraper.readthedocs.io/en/latest/").text

soup = BeautifulSoup(htmlFile, "html.parser")

section = soup.find("div", class_ = "section")
h1 = section.h1
print(h1)

import requests
from bs4 import BeautifulSoup

htmlFile = requests.get("https://first-web-scraper.readthedocs.io/en/latest/").text

soup = BeautifulSoup(htmlFile, "html.parser")

section = soup.find_all("div", class_ = "section")
print(section[1].h2.text)  # we need the second section
print(section[1].p.text)

import requests
from bs4 import BeautifulSoup


def findProfesor():
    res = requests.get("https://ug-schedules.tuj.ac.jp/ug/academics/semester-info/schedule/spring2020").text
    soup = BeautifulSoup(res, features = "html.parser")
    divTable = soup.find("div", class_ = "tableArea")
    courseTable = divTable.table
    tableBody = courseTable.find("tbody")
    data = []  # all data of the table
    courseRows = tableBody.find_all("tr")  # all rows

    for course in courseRows:
        listRow = []
        cols = course.find_all("td")

        for col in cols:
            listRow.append(col.text.strip())

        data.append(listRow)

    strName = input("Input Prof's Name: ")

    nLen = len(data)

    for i in range(0, nLen):
        strCourse = data[i][2]
        strProf = data[i][5]
        if strName.lower() in strProf.lower():
            print("{:40}".format(strProf) + strCourse)

findProfesor()

"""# Turtle"""

import turtle

turtle.showturtle()
turtle.write("Try Turtle")
turtle.forward(100)

turtle.right(90)
turtle.color("red")
turtle.forward(50)

turtle.right(90)
turtle.color("green")
turtle.forward(100)

turtle.right(45)
turtle.forward(80)

turtle.done()  # always the las50t command

import turtle

# Pen
turtle.goto(0, 50)

turtle.penup()
turtle.goto(50, -50)
turtle.pendown()

turtle.color("red")
turtle.circle(50)

turtle.done()  # always the last command

import turtle

turtle.color("blue")
turtle.penup()
turtle.goto(-110, -25)
turtle.pendown()
turtle.circle(45)

turtle.color("black")
turtle.penup()
turtle.goto(0, -25)
turtle.pendown()
turtle.circle(45)

turtle.color("red")
turtle.penup()
turtle.goto(110, -25)
turtle.pendown()
turtle.circle(45)

turtle.color("yellow")
turtle.penup()
turtle.goto(-55, -75)
turtle.pendown()
turtle.circle(45)

turtle.color("green")
turtle.penup()
turtle.goto(55, -75)
turtle.pendown()
turtle.circle(45)

turtle.done()  # always the last command

import turtle

def drawSquare(size, x, y):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()

    for i in range(0, 4):
        turtle.forward(size)
        turtle.right(90)

side = 50

drawSquare(side, -side, side)
drawSquare(side, 0, side)
drawSquare(side, 0, 0)
drawSquare(side, -side, 0)

turtle.done()  # always the last command

import turtle

turtle.left(60)

for i in range (0, 3):
    turtle.forward(50)
    turtle.right(120)

turtle.done()  # always the last command

import turtle

for i in range (0, 5):
    turtle.forward(50)
    turtle.right(144)

turtle.done()  # always the last command

import turtle

for i in range (0, 100):
    turtle.forward(i * 10)
    turtle.right(144)

turtle.done()  # always the last command

import turtle

turtle.color("blue")

for i in range (0, 39):
    turtle.forward(50)
    turtle.left(123)

turtle.color("red")

for i in range (0, 39):
    turtle.forward(100)
    turtle.left(123)

turtle.done()  # always the last command

import turtle

numSides = 10
sideLength = 70
angle = 360 / numSides

for i in range(0, numSides):
    turtle.forward(sideLength)
    turtle.right(angle)

turtle.done()  # always the last command

import turtle

turtle.speed(100)
numLines = 100
angle = 360 / numLines

for i in range(0, numLines):
    turtle.forward(200)
    turtle.right(30)
    turtle.forward(160)
    turtle.left(30)
    turtle.forward(200)
    turtle.penup()
    turtle.goto(0, 0)
    turtle.right(angle)
    turtle.pendown()

turtle.done()  # always the last command

"""## Eat Game"""

import turtle
import random
import math

# Setup Screen
wn = turtle.Screen()
wn.bgcolor("lightgreen")
wn.tracer(2)

# Draw Border
limit = 300
myPen = turtle.Turtle()
myPen.penup()
myPen.speed(10)
myPen.setpos(-limit, limit)
myPen.pendown()
myPen.pensize(3)

for i in range(0, 4):
    myPen.forward(2 * limit)
    myPen.right(90)

myPen.hideturtle()

# Create Player
player = turtle.Turtle()
player.color("blue")
player.shape("turtle")
player.penup()

# Create targets
MAX_TARGET = 6
targets = []

for i in range(0, MAX_TARGET):
    targets.append(turtle.Turtle())
    targets[i].color("red")
    targets[i].shape("circle")
    targets[i].penup()
    targets[i].speed(0)
    targets[i].setpos(random.randint(-limit, limit), random.randint(-limit, limit))

# Set speed variable
speed = 1

# Define functions
def turnLeft():
    player.left(30)

def turnRight():
    player.right(30)

def increaseSpeed():
    global speed
    speed += 1

def decreaseSpeed():
    global speed
    speed -= 1

def areColliding(t1, targets):
    for i in range(0, len(targets)):
        xSquared = math.pow(t1.xcor() - targets[i].xcor(), 2)
        ySquared = math.pow(t1.ycor() - targets[i].ycor(), 2)
        distance = math.sqrt(xSquared + ySquared)
        if distance < 20:
            targets[i].setpos(random.randint(-limit, limit), random.randint(-limit, limit))
            targets[i].right(random.randrange(0, 360))

def bundaryCheck(turtle):
    if turtle.ycor() > limit or turtle.ycor() < -limit:
        turtle.right(180)
    if turtle.xcor() > limit or turtle.xcor() < -limit:
        turtle.right(180)

def moveTargets():
    for i in range(0, MAX_TARGET):
        targets[i].forward(3)
        bundaryCheck(targets[i])

# Set keyboard bindings
wn.listen()
wn.onkey(turnLeft, "Left") # Left means Left Arrow key
wn.onkey(turnRight, "Right")
wn.onkey(increaseSpeed, "Up")
wn.onkey(decreaseSpeed, "Down")

while True:
    player.forward(speed)

    # Boundary check
    bundaryCheck(player)

    # Collision check
    areColliding(player, targets)


    # Move Target
    moveTargets()

wn.mainloop()

"""## Snake Game"""

import turtle
import time
import random

# parameters
limit = 300
delay = 0.1

# score
score = 0
highScore = 0

# setup screen
wn = turtle.Screen()
wn.title("Snake Game")
wn.bgcolor("green")
wn.setup(width = limit * 2, height = limit * 2)
wn.tracer(0)

# snake head
head = turtle.Turtle()
head.speed(0) # fastest animation
head.shape("square")
head.color("black")
head.penup()
head.goto(0, 0)
head.direction = "stop"

# food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

# pen
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.hideturtle()
pen.penup()
pen.goto(0, limit - 40)
pen.write("Score: {} - HighScore: {}".format(score, highScore), align = "center", font = ("Courier", 24, "normal"))

# snake body
segments = []

# function
def goUp():
    if head.direction != "down" or len(segments) == 0:
        head.direction = "up"

def goDown():
    if head.direction != "up" or len(segments) == 0:
        head.direction = "down"

def goLeft():
    if head.direction != "right" or len(segments) == 0:
        head.direction = "left"

def goRight():
    if head.direction != "left" or len(segments) == 0:
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

# keyboard binding
wn.listen()
wn.onkeypress(goUp, "Up")
wn.onkeypress(goDown, "Down")
wn.onkeypress(goLeft, "Left")
wn.onkeypress(goRight, "Right")

# game loop
while True:
    wn.update()

    # check for collision with the border
    if head.xcor() > limit - 10 or head.xcor() < -limit + 10 or head.ycor() > limit - 10 or head.ycor() < -limit + 10:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        # hide segments
        for segment in segments:
            segment.goto(1000, 1000)

        # reset segments
        segments.clear()

        # reset score
        score = 0



    # check collision
    if head.distance(food) < 20:
        x = random.randrange(-limit + 20, limit - 20, 20)
        y = random.randrange(-limit + 20, limit - 20, 20)
        food.goto(x, y)

        # add segment
        segment = turtle.Turtle()
        segment.speed(0)
        segment.color("grey")
        segment.shape("square")
        segment.penup()
        segments.append(segment) # add to list

        score += 10

        if score > highScore:
            highScore = score

    # move segments
    for i in range(len(segments) - 1, 0, -1):
        x = segments[i - 1].xcor()
        y = segments[i - 1].ycor()
        segments[i].goto(x, y)

    # move segment 0 to head
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    pen.clear()
    pen.write("Score: {} - HighScore: {}".format(score, highScore), align="center", font=("Courier", 24, "normal"))

    move()

    # check head body collision
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"

            # hide segments
            for segment in segments:
                segment.goto(1000, 1000)

            # reset segments
            segments.clear()

            # reset score
            score = 0

    time.sleep(delay)

wn.mainloop()